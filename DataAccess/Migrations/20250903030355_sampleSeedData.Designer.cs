// <auto-generated />
using System;
using GoalArena.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250903030355_sampleSeedData")]
    partial class sampleSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GoalArena.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("GoalArena.Models.Match", b =>
                {
                    b.Property<int>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MatchId"));

                    b.Property<int?>("AwayPenaltyScore")
                        .HasColumnType("int");

                    b.Property<int?>("AwayScore")
                        .HasColumnType("int");

                    b.Property<int>("AwayTeamId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HomePenaltyScore")
                        .HasColumnType("int");

                    b.Property<int?>("HomeScore")
                        .HasColumnType("int");

                    b.Property<int>("HomeTeamId")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("KickOffTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("MatchDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Result")
                        .HasColumnType("int");

                    b.Property<string>("Round")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<string>("Stadium")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.Property<int?>("TeamId1")
                        .HasColumnType("int");

                    b.Property<int>("TournamentId")
                        .HasColumnType("int");

                    b.HasKey("MatchId");

                    b.HasIndex("AwayTeamId");

                    b.HasIndex("HomeTeamId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("TeamId");

                    b.HasIndex("TeamId1");

                    b.HasIndex("TournamentId");

                    b.ToTable("Matches");

                    b.HasData(
                        new
                        {
                            MatchId = 1,
                            AwayScore = 0,
                            AwayTeamId = 4,
                            EndTime = new DateTime(2025, 8, 20, 20, 45, 0, 0, DateTimeKind.Unspecified),
                            HomeScore = 2,
                            HomeTeamId = 1,
                            KickOffTime = new TimeSpan(0, 19, 0, 0, 0),
                            MatchDate = new DateTime(2025, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Result = 0,
                            Round = "الجولة 1",
                            SeasonId = 1,
                            Stadium = "استاد الأهلي WE",
                            Status = 5,
                            TournamentId = 1
                        },
                        new
                        {
                            MatchId = 2,
                            AwayScore = 1,
                            AwayTeamId = 5,
                            EndTime = new DateTime(2025, 8, 21, 20, 45, 0, 0, DateTimeKind.Unspecified),
                            HomeScore = 2,
                            HomeTeamId = 2,
                            KickOffTime = new TimeSpan(0, 19, 0, 0, 0),
                            MatchDate = new DateTime(2025, 8, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Result = 0,
                            Round = "الجولة 1",
                            SeasonId = 1,
                            Stadium = "استاد القاهرة الدولي",
                            Status = 5,
                            TournamentId = 1
                        },
                        new
                        {
                            MatchId = 3,
                            AwayScore = 0,
                            AwayTeamId = 6,
                            EndTime = new DateTime(2025, 8, 22, 18, 45, 0, 0, DateTimeKind.Unspecified),
                            HomeScore = 1,
                            HomeTeamId = 3,
                            KickOffTime = new TimeSpan(0, 17, 0, 0, 0),
                            MatchDate = new DateTime(2025, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Result = 0,
                            Round = "الجولة 1",
                            SeasonId = 1,
                            Stadium = "استاد 30 يونيو",
                            Status = 5,
                            TournamentId = 1
                        },
                        new
                        {
                            MatchId = 4,
                            AwayScore = 3,
                            AwayTeamId = 1,
                            EndTime = new DateTime(2025, 8, 25, 20, 45, 0, 0, DateTimeKind.Unspecified),
                            HomeScore = 0,
                            HomeTeamId = 5,
                            KickOffTime = new TimeSpan(0, 19, 0, 0, 0),
                            MatchDate = new DateTime(2025, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Result = 1,
                            Round = "الجولة 2",
                            SeasonId = 1,
                            Stadium = "استاد WE الأهلي",
                            Status = 5,
                            TournamentId = 1
                        },
                        new
                        {
                            MatchId = 5,
                            AwayScore = 2,
                            AwayTeamId = 2,
                            EndTime = new DateTime(2025, 8, 26, 20, 45, 0, 0, DateTimeKind.Unspecified),
                            HomeScore = 0,
                            HomeTeamId = 6,
                            KickOffTime = new TimeSpan(0, 19, 0, 0, 0),
                            MatchDate = new DateTime(2025, 8, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Result = 1,
                            Round = "الجولة 2",
                            SeasonId = 1,
                            Stadium = "استاد الأكاديمية العسكرية",
                            Status = 5,
                            TournamentId = 1
                        },
                        new
                        {
                            MatchId = 6,
                            AwayScore = 1,
                            AwayTeamId = 3,
                            EndTime = new DateTime(2025, 8, 27, 18, 45, 0, 0, DateTimeKind.Unspecified),
                            HomeScore = 1,
                            HomeTeamId = 4,
                            KickOffTime = new TimeSpan(0, 17, 0, 0, 0),
                            MatchDate = new DateTime(2025, 8, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Result = 2,
                            Round = "الجولة 2",
                            SeasonId = 1,
                            Stadium = "استاد بورسعيد",
                            Status = 5,
                            TournamentId = 1
                        },
                        new
                        {
                            MatchId = 7,
                            AwayScore = 0,
                            AwayTeamId = 6,
                            EndTime = new DateTime(2025, 9, 1, 20, 45, 0, 0, DateTimeKind.Unspecified),
                            HomeScore = 4,
                            HomeTeamId = 1,
                            KickOffTime = new TimeSpan(0, 19, 0, 0, 0),
                            MatchDate = new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Result = 0,
                            Round = "الجولة 3",
                            SeasonId = 1,
                            Stadium = "استاد الأهلي WE",
                            Status = 5,
                            TournamentId = 1
                        },
                        new
                        {
                            MatchId = 8,
                            AwayScore = 1,
                            AwayTeamId = 2,
                            EndTime = new DateTime(2025, 9, 2, 20, 45, 0, 0, DateTimeKind.Unspecified),
                            HomeScore = 1,
                            HomeTeamId = 3,
                            KickOffTime = new TimeSpan(0, 19, 0, 0, 0),
                            MatchDate = new DateTime(2025, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Result = 2,
                            Round = "الجولة 3",
                            SeasonId = 1,
                            Stadium = "استاد 30 يونيو",
                            Status = 5,
                            TournamentId = 1
                        },
                        new
                        {
                            MatchId = 9,
                            AwayScore = 1,
                            AwayTeamId = 5,
                            EndTime = new DateTime(2025, 9, 3, 18, 45, 0, 0, DateTimeKind.Unspecified),
                            HomeScore = 2,
                            HomeTeamId = 4,
                            KickOffTime = new TimeSpan(0, 17, 0, 0, 0),
                            MatchDate = new DateTime(2025, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Result = 0,
                            Round = "الجولة 3",
                            SeasonId = 1,
                            Stadium = "استاد بورسعيد",
                            Status = 5,
                            TournamentId = 1
                        },
                        new
                        {
                            MatchId = 10,
                            AwayTeamId = 1,
                            HomeTeamId = 2,
                            KickOffTime = new TimeSpan(0, 19, 0, 0, 0),
                            MatchDate = new DateTime(2025, 9, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Result = 3,
                            Round = "الجولة 4",
                            SeasonId = 1,
                            Stadium = "استاد القاهرة الدولي",
                            Status = 0,
                            TournamentId = 1
                        },
                        new
                        {
                            MatchId = 11,
                            AwayTeamId = 3,
                            HomeTeamId = 5,
                            KickOffTime = new TimeSpan(0, 17, 0, 0, 0),
                            MatchDate = new DateTime(2025, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Result = 3,
                            Round = "الجولة 4",
                            SeasonId = 1,
                            Stadium = "استاد WE الأهلي",
                            Status = 0,
                            TournamentId = 1
                        },
                        new
                        {
                            MatchId = 12,
                            AwayTeamId = 4,
                            HomeTeamId = 6,
                            KickOffTime = new TimeSpan(0, 19, 0, 0, 0),
                            MatchDate = new DateTime(2025, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Result = 3,
                            Round = "الجولة 4",
                            SeasonId = 1,
                            Stadium = "استاد الأكاديمية العسكرية",
                            Status = 0,
                            TournamentId = 1
                        });
                });

            modelBuilder.Entity("GoalArena.Models.MatchEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Corners")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventType")
                        .HasColumnType("int");

                    b.Property<int?>("ExtraMinute")
                        .HasColumnType("int");

                    b.Property<int?>("Fouls")
                        .HasColumnType("int");

                    b.Property<int?>("GoalType")
                        .HasColumnType("int");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<int>("Minute")
                        .HasColumnType("int");

                    b.Property<int?>("Offsides")
                        .HasColumnType("int");

                    b.Property<int?>("PassAccuracy")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int?>("Possession")
                        .HasColumnType("int");

                    b.Property<int?>("RedCards")
                        .HasColumnType("int");

                    b.Property<int?>("RelatedPlayerId")
                        .HasColumnType("int");

                    b.Property<int?>("Saves")
                        .HasColumnType("int");

                    b.Property<int?>("Shots")
                        .HasColumnType("int");

                    b.Property<int?>("ShotsOnTarget")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int?>("YellowCards")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("RelatedPlayerId");

                    b.HasIndex("TeamId");

                    b.ToTable("MatchEvents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "برسي تاو يسجل من عرضية حسين الشحات",
                            EventType = 0,
                            GoalType = 0,
                            MatchId = 1,
                            Minute = 23,
                            PlayerId = 3,
                            RelatedPlayerId = 4,
                            TeamId = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "أفشة يسجل من ركلة جزاء بعد لمسة يد داخل منطقة الجزاء",
                            EventType = 0,
                            GoalType = 1,
                            MatchId = 1,
                            Minute = 67,
                            PlayerId = 2,
                            TeamId = 1
                        },
                        new
                        {
                            Id = 3,
                            Description = "تدخل عنيف",
                            EventType = 2,
                            MatchId = 1,
                            Minute = 55,
                            PlayerId = 5,
                            TeamId = 1
                        },
                        new
                        {
                            Id = 4,
                            Description = "تاو يفتتح التسجيل بتسديدة دقيقة",
                            EventType = 0,
                            GoalType = 0,
                            MatchId = 7,
                            Minute = 15,
                            PlayerId = 3,
                            TeamId = 1
                        },
                        new
                        {
                            Id = 5,
                            Description = "الشحات يضاعف النتيجة بعد عمل رائع من تاو",
                            EventType = 0,
                            GoalType = 0,
                            MatchId = 7,
                            Minute = 29,
                            PlayerId = 4,
                            RelatedPlayerId = 3,
                            TeamId = 1
                        },
                        new
                        {
                            Id = 6,
                            Description = "أفشة يسجل من ركلة حرة رائعة",
                            EventType = 0,
                            GoalType = 2,
                            MatchId = 7,
                            Minute = 58,
                            PlayerId = 2,
                            TeamId = 1
                        },
                        new
                        {
                            Id = 7,
                            Description = "تاو يسجل هدفه الثاني في المباراة برأسية قوية",
                            EventType = 0,
                            GoalType = 0,
                            MatchId = 7,
                            Minute = 77,
                            PlayerId = 3,
                            TeamId = 1
                        },
                        new
                        {
                            Id = 8,
                            Description = "زيزو يسجل مباشرة من ركلة حرة",
                            EventType = 0,
                            GoalType = 2,
                            MatchId = 2,
                            Minute = 15,
                            PlayerId = 7,
                            TeamId = 2
                        },
                        new
                        {
                            Id = 9,
                            Description = "هدف التعادل لفيوتشر برأسية من ركلة ركنية",
                            EventType = 0,
                            GoalType = 0,
                            MatchId = 2,
                            Minute = 38,
                            TeamId = 5
                        },
                        new
                        {
                            Id = 10,
                            Description = "زيزو يسجل هدف الفوز بعد تمريرة رائعة",
                            EventType = 0,
                            GoalType = 0,
                            MatchId = 2,
                            Minute = 79,
                            PlayerId = 7,
                            TeamId = 2
                        },
                        new
                        {
                            Id = 11,
                            Description = "إبراهيم عادل يتقدم ببيراميدز بهدف فردي رائع",
                            EventType = 0,
                            GoalType = 0,
                            MatchId = 8,
                            Minute = 35,
                            PlayerId = 8,
                            TeamId = 3
                        },
                        new
                        {
                            Id = 12,
                            Description = "زيزو يعادل للزمالك بتسديدة رائعة",
                            EventType = 0,
                            GoalType = 0,
                            MatchId = 8,
                            Minute = 68,
                            PlayerId = 7,
                            TeamId = 2
                        });
                });

            modelBuilder.Entity("GoalArena.Models.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageNews")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int?>("TeamId1")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("playerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("TeamId");

                    b.HasIndex("TeamId1");

                    b.HasIndex("playerId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("GoalArena.Models.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlayerId"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("Assists")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Goals")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MatchesPlayed")
                        .HasColumnType("int");

                    b.Property<int>("MinutesPlayed")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalTeam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RedCards")
                        .HasColumnType("int");

                    b.Property<string>("SecondaryPosition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ShirtNumber")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("YellowCards")
                        .HasColumnType("int");

                    b.HasKey("PlayerId");

                    b.HasIndex("TeamId");

                    b.ToTable("Players");

                    b.HasData(
                        new
                        {
                            PlayerId = 1,
                            Age = 36,
                            Assists = 0,
                            DateOfBirth = new DateTime(1988, 12, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "محمد الشناوي",
                            Goals = 0,
                            ImageUrl = "/images/players/mohamed-el-shenawy.png",
                            MatchesPlayed = 3,
                            MinutesPlayed = 270,
                            Name = "محمد الشناوي",
                            NationalTeam = "مصر",
                            Nationality = "مصر",
                            Position = "حارس مرمى",
                            RedCards = 0,
                            ShirtNumber = 1,
                            TeamId = 1,
                            YellowCards = 0
                        },
                        new
                        {
                            PlayerId = 2,
                            Age = 29,
                            Assists = 1,
                            DateOfBirth = new DateTime(1996, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "محمد مجدي أفشة",
                            Goals = 2,
                            ImageUrl = "/images/players/mohamed-magdy-afsha.png",
                            MatchesPlayed = 3,
                            MinutesPlayed = 255,
                            Name = "محمد مجدي أفشة",
                            NationalTeam = "مصر",
                            Nationality = "مصر",
                            Position = "وسط",
                            RedCards = 0,
                            ShirtNumber = 19,
                            TeamId = 1,
                            YellowCards = 1
                        },
                        new
                        {
                            PlayerId = 3,
                            Age = 31,
                            Assists = 1,
                            DateOfBirth = new DateTime(1994, 5, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "برسي تاو",
                            Goals = 3,
                            ImageUrl = "/images/players/percy-tau.png",
                            MatchesPlayed = 3,
                            MinutesPlayed = 235,
                            Name = "برسي تاو",
                            NationalTeam = "جنوب أفريقيا",
                            Nationality = "جنوب أفريقيا",
                            Position = "مهاجم",
                            RedCards = 0,
                            ShirtNumber = 22,
                            TeamId = 1,
                            YellowCards = 0
                        },
                        new
                        {
                            PlayerId = 4,
                            Age = 32,
                            Assists = 2,
                            DateOfBirth = new DateTime(1992, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "حسين الشحات",
                            Goals = 2,
                            ImageUrl = "/images/players/hussein-el-shahat.png",
                            MatchesPlayed = 3,
                            MinutesPlayed = 270,
                            Name = "حسين الشحات",
                            NationalTeam = "مصر",
                            Nationality = "مصر",
                            Position = "جناح",
                            RedCards = 0,
                            ShirtNumber = 14,
                            TeamId = 1,
                            YellowCards = 0
                        },
                        new
                        {
                            PlayerId = 5,
                            Age = 27,
                            Assists = 0,
                            DateOfBirth = new DateTime(1997, 10, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "أليو ديانج",
                            Goals = 0,
                            ImageUrl = "/images/players/aliou-dieng.png",
                            MatchesPlayed = 3,
                            MinutesPlayed = 270,
                            Name = "أليو ديانج",
                            NationalTeam = "مالي",
                            Nationality = "مالي",
                            Position = "وسط دفاعي",
                            RedCards = 0,
                            ShirtNumber = 15,
                            TeamId = 1,
                            YellowCards = 1
                        },
                        new
                        {
                            PlayerId = 6,
                            Age = 33,
                            Assists = 0,
                            DateOfBirth = new DateTime(1992, 7, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "محمد عواد",
                            Goals = 0,
                            ImageUrl = "/images/players/mohamed-awad.png",
                            MatchesPlayed = 3,
                            MinutesPlayed = 270,
                            Name = "محمد عواد",
                            NationalTeam = "مصر",
                            Nationality = "مصر",
                            Position = "حارس مرمى",
                            RedCards = 0,
                            ShirtNumber = 1,
                            TeamId = 2,
                            YellowCards = 0
                        },
                        new
                        {
                            PlayerId = 7,
                            Age = 29,
                            Assists = 0,
                            DateOfBirth = new DateTime(1996, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "أحمد سيد زيزو",
                            Goals = 3,
                            ImageUrl = "/images/players/ahmed-sayed-zizo.png",
                            MatchesPlayed = 3,
                            MinutesPlayed = 270,
                            Name = "أحمد سيد زيزو",
                            NationalTeam = "مصر",
                            Nationality = "مصر",
                            Position = "جناح",
                            RedCards = 0,
                            ShirtNumber = 17,
                            TeamId = 2,
                            YellowCards = 1
                        },
                        new
                        {
                            PlayerId = 8,
                            Age = 24,
                            Assists = 0,
                            DateOfBirth = new DateTime(2001, 4, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "إبراهيم عادل",
                            Goals = 2,
                            ImageUrl = "/images/players/ibrahim-adel.png",
                            MatchesPlayed = 3,
                            MinutesPlayed = 270,
                            Name = "إبراهيم عادل",
                            NationalTeam = "مصر",
                            Nationality = "مصر",
                            Position = "مهاجم",
                            RedCards = 0,
                            ShirtNumber = 11,
                            TeamId = 3,
                            YellowCards = 0
                        });
                });

            modelBuilder.Entity("GoalArena.Models.Season", b =>
                {
                    b.Property<int>("SeasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeasonId"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TournamentId")
                        .HasColumnType("int");

                    b.HasKey("SeasonId");

                    b.HasIndex("TournamentId");

                    b.ToTable("Seasons");

                    b.HasData(
                        new
                        {
                            SeasonId = 1,
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "2025-2026",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            TournamentId = 1
                        });
                });

            modelBuilder.Entity("GoalArena.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Coach")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Colors")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Draws")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Founded")
                        .HasColumnType("datetime2");

                    b.Property<int>("GoalsAgainst")
                        .HasColumnType("int");

                    b.Property<int>("GoalsFor")
                        .HasColumnType("int");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Losses")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Played")
                        .HasColumnType("int");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Stadium")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StadiumCapacity")
                        .HasColumnType("int");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Wins")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "القاهرة",
                            Coach = "مارسيل كولر",
                            Colors = "أحمر وأبيض",
                            Country = "مصر",
                            Draws = 0,
                            Founded = new DateTime(1907, 4, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GoalsAgainst = 0,
                            GoalsFor = 9,
                            LogoUrl = "/images/teams/al-ahly.png",
                            Losses = 0,
                            Name = "الأهلي",
                            Played = 3,
                            Position = 1,
                            SeasonId = 1,
                            ShortName = "AHL",
                            Stadium = "استاد الأهلي WE",
                            StadiumCapacity = 30000,
                            Website = "https://www.alahlyegypt.com/",
                            Wins = 3
                        },
                        new
                        {
                            Id = 2,
                            City = "القاهرة",
                            Coach = "فرانسيسكو ميكالي",
                            Colors = "أبيض وأحمر",
                            Country = "مصر",
                            Draws = 1,
                            Founded = new DateTime(1911, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GoalsAgainst = 2,
                            GoalsFor = 5,
                            LogoUrl = "/images/teams/zamalek.png",
                            Losses = 0,
                            Name = "الزمالك",
                            Played = 3,
                            Position = 2,
                            SeasonId = 1,
                            ShortName = "ZAM",
                            Stadium = "استاد القاهرة الدولي",
                            StadiumCapacity = 75000,
                            Website = "https://www.zamalekclub.com/",
                            Wins = 2
                        },
                        new
                        {
                            Id = 3,
                            City = "القاهرة",
                            Coach = "خالد جلال",
                            Colors = "أزرق وأصفر",
                            Country = "مصر",
                            Draws = 2,
                            Founded = new DateTime(2008, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GoalsAgainst = 2,
                            GoalsFor = 3,
                            LogoUrl = "/images/teams/pyramids.png",
                            Losses = 0,
                            Name = "بيراميدز",
                            Played = 3,
                            Position = 3,
                            SeasonId = 1,
                            ShortName = "PYR",
                            Stadium = "استاد 30 يونيو",
                            StadiumCapacity = 30000,
                            Website = "https://www.pyramidsfc.com/",
                            Wins = 1
                        },
                        new
                        {
                            Id = 4,
                            City = "بورسعيد",
                            Coach = "محمد عودة",
                            Colors = "أخضر وأبيض",
                            Country = "مصر",
                            Draws = 1,
                            Founded = new DateTime(1920, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GoalsAgainst = 3,
                            GoalsFor = 3,
                            LogoUrl = "/images/teams/el-masry.png",
                            Losses = 1,
                            Name = "المصري",
                            Played = 3,
                            Position = 4,
                            SeasonId = 1,
                            ShortName = "MAS",
                            Stadium = "استاد بورسعيد",
                            StadiumCapacity = 18000,
                            Website = "https://www.almasryclub.com/",
                            Wins = 1
                        },
                        new
                        {
                            Id = 5,
                            City = "القاهرة",
                            Coach = "علي ماهر",
                            Colors = "أبيض وأزرق",
                            Country = "مصر",
                            Draws = 0,
                            Founded = new DateTime(2011, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GoalsAgainst = 5,
                            GoalsFor = 2,
                            LogoUrl = "/images/teams/future-fc.png",
                            Losses = 2,
                            Name = "فيوتشر",
                            Played = 3,
                            Position = 5,
                            SeasonId = 1,
                            ShortName = "FUT",
                            Stadium = "استاد WE الأهلي",
                            StadiumCapacity = 20000,
                            Website = "https://www.futurefcegypt.com/",
                            Wins = 1
                        },
                        new
                        {
                            Id = 6,
                            City = "القاهرة",
                            Coach = "هاني رمزي",
                            Colors = "أزرق وأبيض",
                            Country = "مصر",
                            Draws = 0,
                            Founded = new DateTime(2006, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GoalsAgainst = 7,
                            GoalsFor = 0,
                            LogoUrl = "/images/teams/ceramica-cleopatra.png",
                            Losses = 3,
                            Name = "سيراميكا كليوباترا",
                            Played = 3,
                            Position = 6,
                            SeasonId = 1,
                            ShortName = "CER",
                            Stadium = "استاد الأكاديمية العسكرية",
                            StadiumCapacity = 28500,
                            Website = "https://www.ceramicacleopatrafc.com/",
                            Wins = 0
                        });
                });

            modelBuilder.Entity("GoalArena.Models.TeamSeason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Draws")
                        .HasColumnType("int");

                    b.Property<string>("Form")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GoalsAgainst")
                        .HasColumnType("int");

                    b.Property<int>("GoalsFor")
                        .HasColumnType("int");

                    b.Property<bool>("IsQualified")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRelegated")
                        .HasColumnType("bit");

                    b.Property<int>("Losses")
                        .HasColumnType("int");

                    b.Property<int>("Played")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("Wins")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamSeasons");
                });

            modelBuilder.Entity("GoalArena.Models.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketId"));

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SeatNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TicketStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TicketId");

                    b.HasIndex("MatchId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("GoalArena.Models.Tournament", b =>
                {
                    b.Property<int>("TournamentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TournamentId"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TournamentId");

                    b.ToTable("Tournaments");

                    b.HasData(
                        new
                        {
                            TournamentId = 1,
                            Country = "مصر",
                            LogoUrl = "/images/tournaments/egyptian-premier-league.png",
                            Name = "الدوري المصري الممتاز"
                        },
                        new
                        {
                            TournamentId = 3,
                            Country = "أوروبا",
                            LogoUrl = "/images/tournaments/ucl.png",
                            Name = "دوري أبطال أوروبا"
                        });
                });

            modelBuilder.Entity("GoalArena.Models.UserOTP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("UserOTPs");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GoalArena.Models.Match", b =>
                {
                    b.HasOne("GoalArena.Models.Team", "AwayTeam")
                        .WithMany()
                        .HasForeignKey("AwayTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GoalArena.Models.Team", "HomeTeam")
                        .WithMany()
                        .HasForeignKey("HomeTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GoalArena.Models.Season", "Season")
                        .WithMany("Matches")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoalArena.Models.Team", null)
                        .WithMany("AwayMatches")
                        .HasForeignKey("TeamId");

                    b.HasOne("GoalArena.Models.Team", null)
                        .WithMany("HomeMatches")
                        .HasForeignKey("TeamId1");

                    b.HasOne("GoalArena.Models.Tournament", "Tournament")
                        .WithMany("Matches")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AwayTeam");

                    b.Navigation("HomeTeam");

                    b.Navigation("Season");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("GoalArena.Models.MatchEvent", b =>
                {
                    b.HasOne("GoalArena.Models.Match", "Match")
                        .WithMany("MatchEvents")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoalArena.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId");

                    b.HasOne("GoalArena.Models.Player", "RelatedPlayer")
                        .WithMany()
                        .HasForeignKey("RelatedPlayerId");

                    b.HasOne("GoalArena.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("Player");

                    b.Navigation("RelatedPlayer");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("GoalArena.Models.News", b =>
                {
                    b.HasOne("GoalArena.Models.Match", "Match")
                        .WithMany("News")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoalArena.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GoalArena.Models.Team", null)
                        .WithMany("News")
                        .HasForeignKey("TeamId1");

                    b.HasOne("GoalArena.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("playerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("Player");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("GoalArena.Models.Player", b =>
                {
                    b.HasOne("GoalArena.Models.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("GoalArena.Models.Season", b =>
                {
                    b.HasOne("GoalArena.Models.Tournament", "Tournament")
                        .WithMany("Seasons")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("GoalArena.Models.Team", b =>
                {
                    b.HasOne("GoalArena.Models.Season", "Season")
                        .WithMany("Teams")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");
                });

            modelBuilder.Entity("GoalArena.Models.TeamSeason", b =>
                {
                    b.HasOne("GoalArena.Models.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoalArena.Models.Team", "Team")
                        .WithMany("TeamSeasons")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Season");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("GoalArena.Models.Ticket", b =>
                {
                    b.HasOne("GoalArena.Models.Match", "Match")
                        .WithMany("Tickets")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");
                });

            modelBuilder.Entity("GoalArena.Models.UserOTP", b =>
                {
                    b.HasOne("GoalArena.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GoalArena.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GoalArena.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoalArena.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GoalArena.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GoalArena.Models.Match", b =>
                {
                    b.Navigation("MatchEvents");

                    b.Navigation("News");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("GoalArena.Models.Season", b =>
                {
                    b.Navigation("Matches");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("GoalArena.Models.Team", b =>
                {
                    b.Navigation("AwayMatches");

                    b.Navigation("HomeMatches");

                    b.Navigation("News");

                    b.Navigation("Players");

                    b.Navigation("TeamSeasons");
                });

            modelBuilder.Entity("GoalArena.Models.Tournament", b =>
                {
                    b.Navigation("Matches");

                    b.Navigation("Seasons");
                });
#pragma warning restore 612, 618
        }
    }
}
